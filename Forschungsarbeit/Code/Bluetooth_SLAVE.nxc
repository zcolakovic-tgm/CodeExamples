/**
 * Vorwiegend Stürmer... (SLAVE)
 *
 * @author Zeljko Colakovic
 * @version 2016-08-16
 */


// Ports
#define LIGHT   IN_1
#define IF      IN_2
#define COMPASS IN_3
#define TOUCH   IN_4

#define ENGINE  OUT_BC


// Linien
#define WHITE 42
#define BLACK 27
#define GREEN 28

// Geschwindigkeiten
#define SPEED_NORMAL 50

// Globale Variablen
bool goalKeeper,foundBall,foundGoal;
int startTime, endTime;

/*
 * Methode zur Suche des Balles...
 *
 * @since 2016-08-16
 */
inline void FindBall(){
    while(true){
        // Gerade aus
        if(SensorHTIRSeeker2ACDir(IF) == 5 || SensorHTIRSeeker2ACDir(IF) == 4 || SensorHTIRSeeker2ACDir(IF) == 6){
            OnFwdSync(ENGINE,SPEED_NORMAL,0);

        // Leicht links
        }else if(SensorHTIRSeeker2ACDir(IF) == 8 || SensorHTIRSeeker2ACDir(IF) == 7){
            OnFwdSync(ENGINE,SPEED_NORMAL,30);

        // Leicht rechts
        }else if(SensorHTIRSeeker2ACDir(IF) == 3 || SensorHTIRSeeker2ACDir(IF) == 2){
            OnFwdSync(ENGINE,SPEED_NORMAL,-30);

        // Stark links
        }else if(SensorHTIRSeeker2ACDir(IF) == 9){
            OnFwdSync(ENGINE,SPEED_NORMAL,100);

        // Stark rechts
        }else if(SensorHTIRSeeker2ACDir(IF) == 1){
            OnFwdSync(ENGINE,SPEED_NORMAL,-100);
        }
    }
}

/*
 * Methode die rausfindet auf welchem Tor gespielt werden soll...
 *
 * @since 2016-08-16
 */
inline bool WhichGoal(){
    if(SensorHTCompass(COMPASS) >= 330 && SensorHTCompass(COMPASS) <= 359){
        return true;
    }else{
        return false;
    }
}

/*
 * Methode zum gerade ausfahren um den Ball zu suchen
 *
 * @since 2016-08-16
 */
inline bool FindGoal(){
    while(true){
        if(WhichGoal == true){
            // Gerade aus
            if(SensorHTCompass(COMPASS) >= 340 && SensorHTCompass(COMPASS) <= 350){
                OnFwdSync(ENGINE,SPEED_NORMAL,0);

            // Links
            }else if(SensorHTCompass(COMPASS) >= 351 && SensorHTCompass(COMPASS) <= 359 || SensorHTCompass(COMPASS) >= 1 && SensorHTCompass(COMPASS) <= 107){
                OnFwdSync(ENGINE,SPEED_NORMAL,-30);

            // Rechts
            }else if(SensorHTCompass(COMPASS) >= 108 && SensorHTCompass(COMPASS) <= 339){
                OnFwdSync(ENGINE,SPEED_NORMAL,30);
            }
        }else{
            // Gerade aus
            if(SensorHTCompass(COMPASS) >= 100 && SensorHTCompass(COMPASS) <= 115){
                OnFwdSync(ENGINE,SPEED_NORMAL,0);

            // Links
            }else if(SensorHTCompass(COMPASS) >= 116 && SensorHTCompass(COMPASS) <= 346){
                OnFwdSync(ENGINE,SPEED_NORMAL,-30);

            // Rechts
            }else if(SensorHTCompass(COMPASS) >= 347 && SensorHTCompass(COMPASS) <= 359 || SensorHTCompass(COMPASS) >= 1 && SensorHTCompass(COMPASS) <= 99){
                OnFwdSync(ENGINE,SPEED_NORMAL,30);
            }
        }
    }
}

/*
 * Überprüft ob es eine weiße Linie sieht...
 *
 * @since 2016-08-16
 */
inline bool isWhite(){
    if(Sensor(LIGHT) > 35){
        Off(ENGINE);
        OnRevSync(ENGINE,SPEED_NORMAL,50);
        Wait(1500);
    }
}

/*
 * Überprüft ob es eine schwarze Linie sieht...
 *
 * @since 2016-08-16
 */
inline void isBlack(bool area){
    if(area == true){
        if(Sensor(LIGHT) < 27){
            Off(ENGINE);
            OnRevSync(ENGINE,SPEED_NORMAL,0);
            Wait(1000);
        }
    }
}

/*
 * Methode zur Überprüfung der Verbindung
 *
 * @since 2016-08-16
 */
bool BTCheck(int conn){
    if(!BluetoothStatus(conn)==NO_ERR){
        TextOut(5,LCD_LINE2,"Error");
        Wait(1000);
        Stop(true);
    }else{
        return true;
    }
}

/*
 * Main...
 *
 * @since 2016-08-16
 */
task main(){
    // Sensoren setzen
    SetSensorLight(LIGHT);
    SetSensorLowspeed(IF);
    SetSensorLowspeed(COMPASS);
    
    // Überprüfung der Verbindung
    BTCheck(0);
}
