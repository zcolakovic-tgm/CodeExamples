/**
 * Vorwiegend Tormann... (MASTER)
 *
 * @author Zeljko Colakovic
 * @version 2016-08-16
 */

// Ports
#define LIGHT   IN_1
#define IF      IN_2
#define COMPASS IN_3

#define ENGINE  OUT_BC

// Verbindung
#define BT_CONN 1

// Linien
#define WHITE 57
#define BLACK 31
#define GREEN 35

// Geschwindigkeiten
#define SPEED_NORMAL 50
#define SPEED_STOP    0

// Verbindung
#define CONNECTION 1

// Globale Variablen
bool goalKeeper,foundBall,foundGoal;
int startTime, endTime;

/*
 * Methode zur Suche des Balles...
 *
 * @param goalKeeper dient als Information über den derzeitigen stand
 * ob der Torwart in den Angriff übergehen soll oder nicht.
 * @since 2016-08-16
 */
inline void FindBall(){
    // Gerade aus
    if(SensorHTIRSeeker2ACDir(IF) == 5 || SensorHTIRSeeker2ACDir(IF) == 4 || SensorHTIRSeeker2ACDir(IF) == 6){
        OnFwdSync(ENGINE,SPEED_NORMAL,0);

    // Leicht links
    }else if(SensorHTIRSeeker2ACDir(IF) == 8 || SensorHTIRSeeker2ACDir(IF) == 7){
        OnFwdSync(ENGINE,SPEED_NORMAL,30);

    // Leicht rechts
    }else if(SensorHTIRSeeker2ACDir(IF) == 3 || SensorHTIRSeeker2ACDir(IF) == 2){
        OnFwdSync(ENGINE,SPEED_NORMAL,-30);

    // Stark links
    }else if(SensorHTIRSeeker2ACDir(IF) == 9){
        OnFwdSync(ENGINE,SPEED_NORMAL,100);

    // Stark rechts
    }else if(SensorHTIRSeeker2ACDir(IF) == 1){
        OnFwdSync(ENGINE,SPEED_NORMAL,-100);
    }
}

/*
 * Methode die rausfindet auf welchem Tor gespielt werden soll...
 *
 * @since 2016-08-16
 */
inline bool WhichGoal(){
    if(SensorHTCompass(COMPASS) >= 300 && SensorHTCompass(COMPASS) <= 350){
        return true;
    }else{
        return false;
    }
}

/*
 * Methode zum gerade ausfahren um den Ball zu suchen
 *
 * @param foundBall dient als Information über den derzeitigen stand
 * des Balles ob sich der im Besitz befindet oder nicht.
 * @since 2016-08-16
 */
inline void FindGoal(bool foundBall){
    if(foundBall == true){
        if(WhichGoal() == true){
            // Gerade aus
            if(SensorHTCompass(COMPASS) >= 315 && SensorHTCompass(COMPASS) <= 325){
                OnFwdSync(ENGINE,SPEED_NORMAL,0);

            // Links
            }else if(SensorHTCompass(COMPASS) >= 326 && SensorHTCompass(COMPASS) <= 359 || SensorHTCompass(COMPASS) >= 1 && SensorHTCompass(COMPASS) <= 107){
                OnFwdSync(ENGINE,SPEED_NORMAL,-30);

            // Rechts
            }else if(SensorHTCompass(COMPASS) >= 108 && SensorHTCompass(COMPASS) <= 314){
                OnFwdSync(ENGINE,SPEED_NORMAL,30);
            }
        }else{
            // Gerade aus
            if(SensorHTCompass(COMPASS) >= 100 && SensorHTCompass(COMPASS) <= 115){
                OnFwdSync(ENGINE,SPEED_NORMAL,0);

            // Links
            }else if(SensorHTCompass(COMPASS) >= 116 && SensorHTCompass(COMPASS) <= 318){
                OnFwdSync(ENGINE,SPEED_NORMAL,-30);

            // Rechts
            }else if(SensorHTCompass(COMPASS) >= 319 && SensorHTCompass(COMPASS) <= 359 || SensorHTCompass(COMPASS) >= 1 && SensorHTCompass(COMPASS) <= 99){
                OnFwdSync(ENGINE,SPEED_NORMAL,30);
            }
        }
    }
}

/*
 * Methode die das Verhalten des TorRoboter bestimmt
 *
 * @since 2016-08-16
 */
inline void GoalKeeper(){
    // Gerade aus
    if(SensorHTIRSeeker2ACDir(IF) == 4 || SensorHTIRSeeker2ACDir(IF) == 5 ||  SensorHTIRSeeker2ACDir(IF) == 6){
        OnFwdSync(ENGINE,SPEED_STOP,0);

    // Leicht links
    }else if(SensorHTIRSeeker2ACDir(IF) == 8 || SensorHTIRSeeker2ACDir(IF) == 7){
        OnFwdSync(ENGINE,SPEED_STOP,30);

    // Leicht rechts
    }else if(SensorHTIRSeeker2ACDir(IF) == 3 || SensorHTIRSeeker2ACDir(IF) == 2){
        OnFwdSync(ENGINE,SPEED_STOP,-30);

    // Stark links
    }else if(SensorHTIRSeeker2ACDir(IF) == 9){
        OnFwdSync(ENGINE,SPEED_STOP,100);

    // Stark rechts
    }else if(SensorHTIRSeeker2ACDir(IF) == 1){
        OnFwdSync(ENGINE,SPEED_STOP,-100);
    }
}

/*
 * Methode die den Torwart in den Sturm schickt.
 *
 * @param foundBall dient als Information über den derzeitigen stand
 * des Balles ob sich der im Besitz befindet oder nicht.
 * @param foundGoal
 * @param goalKeeper dient als Information über den derzeitigen stand
 * ob der Torwart in den Angriff übergehen soll oder nicht.
 * @since 2016-08-16
 */
inline bool StrikerActive(bool foundBall, bool foundGoal, bool goalKeeper){
    if(goalKeeper == true){
        GoalKeeper();
    }else{
        FindBall();
        FindGoal(foundBall);
    }
}

/*
 * Überprüft ob es eine weiße Linie sieht...
 *
 * @since 2016-08-16
 */
inline void isWhite(){
    if(Sensor(LIGHT) < 33){
        Off(ENGINE);
        OnRevSync(ENGINE,SPEED_NORMAL,50);
        Wait(1500);
    }
}

/*
 * Überprüft ob es eine schwarze Linie sieht...
 *
 * @param goalKeeper dient als Information über den derzeitigen stand
 * ob der Torwart aus dem Strafraum hinaus darf oder noch nicht.
 * @since 2016-08-16
 */
inline void isBlack(bool goalKeeper){
    if(goalKeeper == true){
        if(Sensor(LIGHT) > 35){
            Off(ENGINE);
            OnRevSync(ENGINE,SPEED_NORMAL,0);
            Wait(1000);
        }
    }
}

/*
 * Methode zur Überprüfung der Verbindung
 * 
 * @source Kopiert von https://github.com/grahl/nxt/blob/master/
 *                     Examples/BluetoothMaster.nxc
 * @param conn die Nummer der Connection
 * @since 2016-08-16
 */
bool BTCheck(int conn){
    if(!BluetoothStatus(conn)==NO_ERR){
        TextOut(5,LCD_LINE2,"Error");
        return false;
    }else{
        return true;
    }
}

/*
 * Main....
 *
 * @since 2016-08-16
 */
task main(){
    // Sensoren setzen
    SetSensorLight(LIGHT);
    SetSensorLowspeed(IF);
    SetSensorLowspeed(COMPASS);
    
    /*
    while(true){
         // Holt sich den abgelegten Wert aus der Queue vom SLAVE
         ReceiveRemoteBool(MAILBOX1 , true, goalKeeper);
        // Überprüfung der Verbidnung
        if(BTCheck(BT_CONN) == false){
            TextOut(1,LCD_LINE2,"Striker mood active!!!");
            
        }else{
            TextOut(1,LCD_LINE1,"Keeper mood acitve!!!");
            
        }
    }
    */

}
